{"version":3,"file":"static/js/890.f5e077e0.chunk.js","mappings":"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","sources":["../node_modules/esptool-js/lib/targets/esp32c6.js","../node_modules/esptool-js/lib/targets/esp32c61.js","../node_modules/esptool-js/lib/targets/rom.js"],"sourcesContent":["import { ROM } from \"./rom.js\";\nexport class ESP32C6ROM extends ROM {\n    constructor() {\n        super(...arguments);\n        this.CHIP_NAME = \"ESP32-C6\";\n        this.IMAGE_CHIP_ID = 13;\n        this.EFUSE_BASE = 0x600b0800;\n        this.MAC_EFUSE_REG = this.EFUSE_BASE + 0x044;\n        this.UART_CLKDIV_REG = 0x3ff40014;\n        this.UART_CLKDIV_MASK = 0xfffff;\n        this.UART_DATE_REG_ADDR = 0x6000007c;\n        this.FLASH_WRITE_SIZE = 0x400;\n        this.BOOTLOADER_FLASH_OFFSET = 0;\n        this.FLASH_SIZES = {\n            \"1MB\": 0x00,\n            \"2MB\": 0x10,\n            \"4MB\": 0x20,\n            \"8MB\": 0x30,\n            \"16MB\": 0x40,\n        };\n        this.SPI_REG_BASE = 0x60002000;\n        this.SPI_USR_OFFS = 0x18;\n        this.SPI_USR1_OFFS = 0x1c;\n        this.SPI_USR2_OFFS = 0x20;\n        this.SPI_MOSI_DLEN_OFFS = 0x24;\n        this.SPI_MISO_DLEN_OFFS = 0x28;\n        this.SPI_W0_OFFS = 0x58;\n    }\n    async getPkgVersion(loader) {\n        const numWord = 3;\n        const block1Addr = this.EFUSE_BASE + 0x044;\n        const addr = block1Addr + 4 * numWord;\n        const word3 = await loader.readReg(addr);\n        const pkgVersion = (word3 >> 21) & 0x07;\n        return pkgVersion;\n    }\n    async getChipRevision(loader) {\n        const block1Addr = this.EFUSE_BASE + 0x044;\n        const numWord = 3;\n        const pos = 18;\n        const addr = block1Addr + 4 * numWord;\n        const ret = ((await loader.readReg(addr)) & (0x7 << pos)) >> pos;\n        return ret;\n    }\n    async getChipDescription(loader) {\n        let desc;\n        const pkgVer = await this.getPkgVersion(loader);\n        if (pkgVer === 0) {\n            desc = \"ESP32-C6\";\n        }\n        else {\n            desc = \"unknown ESP32-C6\";\n        }\n        const chipRev = await this.getChipRevision(loader);\n        desc += \" (revision \" + chipRev + \")\";\n        return desc;\n    }\n    async getChipFeatures(loader) {\n        return [\"Wi-Fi 6\", \"BT 5\", \"IEEE802.15.4\"];\n    }\n    async getCrystalFreq(loader) {\n        return 40;\n    }\n    _d2h(d) {\n        const h = (+d).toString(16);\n        return h.length === 1 ? \"0\" + h : h;\n    }\n    async readMac(loader) {\n        let mac0 = await loader.readReg(this.MAC_EFUSE_REG);\n        mac0 = mac0 >>> 0;\n        let mac1 = await loader.readReg(this.MAC_EFUSE_REG + 4);\n        mac1 = (mac1 >>> 0) & 0x0000ffff;\n        const mac = new Uint8Array(6);\n        mac[0] = (mac1 >> 8) & 0xff;\n        mac[1] = mac1 & 0xff;\n        mac[2] = (mac0 >> 24) & 0xff;\n        mac[3] = (mac0 >> 16) & 0xff;\n        mac[4] = (mac0 >> 8) & 0xff;\n        mac[5] = mac0 & 0xff;\n        return (this._d2h(mac[0]) +\n            \":\" +\n            this._d2h(mac[1]) +\n            \":\" +\n            this._d2h(mac[2]) +\n            \":\" +\n            this._d2h(mac[3]) +\n            \":\" +\n            this._d2h(mac[4]) +\n            \":\" +\n            this._d2h(mac[5]));\n    }\n    getEraseSize(offset, size) {\n        return size;\n    }\n}\n","import { ESP32C6ROM } from \"./esp32c6\";\nexport class ESP32C61ROM extends ESP32C6ROM {\n    constructor() {\n        super(...arguments);\n        this.CHIP_NAME = \"ESP32-C61\";\n        this.IMAGE_CHIP_ID = 20;\n        this.CHIP_DETECT_MAGIC_VALUE = [0x33f0206f, 0x2421606f];\n        this.UART_DATE_REG_ADDR = 0x60000000 + 0x7c;\n        this.EFUSE_BASE = 0x600b4800;\n        this.EFUSE_BLOCK1_ADDR = this.EFUSE_BASE + 0x044;\n        this.MAC_EFUSE_REG = this.EFUSE_BASE + 0x044;\n        this.EFUSE_RD_REG_BASE = this.EFUSE_BASE + 0x030; // BLOCK0 read base address\n        this.EFUSE_PURPOSE_KEY0_REG = this.EFUSE_BASE + 0x34;\n        this.EFUSE_PURPOSE_KEY0_SHIFT = 0;\n        this.EFUSE_PURPOSE_KEY1_REG = this.EFUSE_BASE + 0x34;\n        this.EFUSE_PURPOSE_KEY1_SHIFT = 4;\n        this.EFUSE_PURPOSE_KEY2_REG = this.EFUSE_BASE + 0x34;\n        this.EFUSE_PURPOSE_KEY2_SHIFT = 8;\n        this.EFUSE_PURPOSE_KEY3_REG = this.EFUSE_BASE + 0x34;\n        this.EFUSE_PURPOSE_KEY3_SHIFT = 12;\n        this.EFUSE_PURPOSE_KEY4_REG = this.EFUSE_BASE + 0x34;\n        this.EFUSE_PURPOSE_KEY4_SHIFT = 16;\n        this.EFUSE_PURPOSE_KEY5_REG = this.EFUSE_BASE + 0x34;\n        this.EFUSE_PURPOSE_KEY5_SHIFT = 20;\n        this.EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT_REG = this.EFUSE_RD_REG_BASE;\n        this.EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT = 1 << 20;\n        this.EFUSE_SPI_BOOT_CRYPT_CNT_REG = this.EFUSE_BASE + 0x030;\n        this.EFUSE_SPI_BOOT_CRYPT_CNT_MASK = 0x7 << 23;\n        this.EFUSE_SECURE_BOOT_EN_REG = this.EFUSE_BASE + 0x034;\n        this.EFUSE_SECURE_BOOT_EN_MASK = 1 << 26;\n        this.FLASH_FREQUENCY = {\n            \"80m\": 0xf,\n            \"40m\": 0x0,\n            \"20m\": 0x2,\n        };\n        this.MEMORY_MAP = [\n            [0x00000000, 0x00010000, \"PADDING\"],\n            [0x41800000, 0x42000000, \"DROM\"],\n            [0x40800000, 0x40860000, \"DRAM\"],\n            [0x40800000, 0x40860000, \"BYTE_ACCESSIBLE\"],\n            [0x4004ac00, 0x40050000, \"DROM_MASK\"],\n            [0x40000000, 0x4004ac00, \"IROM_MASK\"],\n            [0x41000000, 0x41800000, \"IROM\"],\n            [0x40800000, 0x40860000, \"IRAM\"],\n            [0x50000000, 0x50004000, \"RTC_IRAM\"],\n            [0x50000000, 0x50004000, \"RTC_DRAM\"],\n            [0x600fe000, 0x60100000, \"MEM_INTERNAL2\"],\n        ];\n        this.UF2_FAMILY_ID = 0x77d850c4;\n        this.EFUSE_MAX_KEY = 5;\n        this.KEY_PURPOSES = {\n            0: \"USER/EMPTY\",\n            1: \"ECDSA_KEY\",\n            2: \"XTS_AES_256_KEY_1\",\n            3: \"XTS_AES_256_KEY_2\",\n            4: \"XTS_AES_128_KEY\",\n            5: \"HMAC_DOWN_ALL\",\n            6: \"HMAC_DOWN_JTAG\",\n            7: \"HMAC_DOWN_DIGITAL_SIGNATURE\",\n            8: \"HMAC_UP\",\n            9: \"SECURE_BOOT_DIGEST0\",\n            10: \"SECURE_BOOT_DIGEST1\",\n            11: \"SECURE_BOOT_DIGEST2\",\n            12: \"KM_INIT_KEY\",\n            13: \"XTS_AES_256_KEY_1_PSRAM\",\n            14: \"XTS_AES_256_KEY_2_PSRAM\",\n            15: \"XTS_AES_128_KEY_PSRAM\",\n        };\n    }\n    async getPkgVersion(loader) {\n        const numWord = 2;\n        return ((await loader.readReg(this.EFUSE_BLOCK1_ADDR + 4 * numWord)) >> 26) & 0x07;\n    }\n    async getMinorChipVersion(loader) {\n        const numWord = 2;\n        return ((await loader.readReg(this.EFUSE_BLOCK1_ADDR + 4 * numWord)) >> 0) & 0x0f;\n    }\n    async getMajorChipVersion(loader) {\n        const numWord = 2;\n        return ((await loader.readReg(this.EFUSE_BLOCK1_ADDR + 4 * numWord)) >> 4) & 0x03;\n    }\n    async getChipDescription(loader) {\n        const pkgVer = await this.getPkgVersion(loader);\n        let desc;\n        if (pkgVer === 0) {\n            desc = \"ESP32-C61\";\n        }\n        else {\n            desc = \"unknown ESP32-C61\";\n        }\n        const majorRev = await this.getMajorChipVersion(loader);\n        const minorRev = await this.getMinorChipVersion(loader);\n        return `${desc} (revision v${majorRev}.${minorRev})`;\n    }\n    async getChipFeatures(loader) {\n        return [\"WiFi 6\", \"BT 5\"];\n    }\n    async readMac(loader) {\n        let mac0 = await loader.readReg(this.MAC_EFUSE_REG);\n        mac0 = mac0 >>> 0;\n        let mac1 = await loader.readReg(this.MAC_EFUSE_REG + 4);\n        mac1 = (mac1 >>> 0) & 0x0000ffff;\n        const mac = new Uint8Array(6);\n        mac[0] = (mac1 >> 8) & 0xff;\n        mac[1] = mac1 & 0xff;\n        mac[2] = (mac0 >> 24) & 0xff;\n        mac[3] = (mac0 >> 16) & 0xff;\n        mac[4] = (mac0 >> 8) & 0xff;\n        mac[5] = mac0 & 0xff;\n        return (this._d2h(mac[0]) +\n            \":\" +\n            this._d2h(mac[1]) +\n            \":\" +\n            this._d2h(mac[2]) +\n            \":\" +\n            this._d2h(mac[3]) +\n            \":\" +\n            this._d2h(mac[4]) +\n            \":\" +\n            this._d2h(mac[5]));\n    }\n}\n","/**\n * Represents a chip ROM with basic registers field and abstract functions.\n */\nexport class ROM {\n    /**\n     * Get the chip erase size.\n     * @param {number} offset - Offset to start erase.\n     * @param {number} size - Size to erase.\n     * @returns {number} The erase size of the chip as number.\n     */\n    getEraseSize(offset, size) {\n        return size;\n    }\n}\n"],"names":["ESP32C6ROM","ROM","constructor","super","arguments","this","CHIP_NAME","IMAGE_CHIP_ID","EFUSE_BASE","MAC_EFUSE_REG","UART_CLKDIV_REG","UART_CLKDIV_MASK","UART_DATE_REG_ADDR","FLASH_WRITE_SIZE","BOOTLOADER_FLASH_OFFSET","FLASH_SIZES","SPI_REG_BASE","SPI_USR_OFFS","SPI_USR1_OFFS","SPI_USR2_OFFS","SPI_MOSI_DLEN_OFFS","SPI_MISO_DLEN_OFFS","SPI_W0_OFFS","getPkgVersion","loader","addr","readReg","getChipRevision","getChipDescription","desc","getChipFeatures","getCrystalFreq","_d2h","d","h","toString","length","readMac","mac0","mac1","mac","Uint8Array","getEraseSize","offset","size","ESP32C61ROM","CHIP_DETECT_MAGIC_VALUE","EFUSE_BLOCK1_ADDR","EFUSE_RD_REG_BASE","EFUSE_PURPOSE_KEY0_REG","EFUSE_PURPOSE_KEY0_SHIFT","EFUSE_PURPOSE_KEY1_REG","EFUSE_PURPOSE_KEY1_SHIFT","EFUSE_PURPOSE_KEY2_REG","EFUSE_PURPOSE_KEY2_SHIFT","EFUSE_PURPOSE_KEY3_REG","EFUSE_PURPOSE_KEY3_SHIFT","EFUSE_PURPOSE_KEY4_REG","EFUSE_PURPOSE_KEY4_SHIFT","EFUSE_PURPOSE_KEY5_REG","EFUSE_PURPOSE_KEY5_SHIFT","EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT_REG","EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT","EFUSE_SPI_BOOT_CRYPT_CNT_REG","EFUSE_SPI_BOOT_CRYPT_CNT_MASK","EFUSE_SECURE_BOOT_EN_REG","EFUSE_SECURE_BOOT_EN_MASK","FLASH_FREQUENCY","MEMORY_MAP","UF2_FAMILY_ID","EFUSE_MAX_KEY","KEY_PURPOSES","getMinorChipVersion","getMajorChipVersion","majorRev","minorRev","concat"],"sourceRoot":""}