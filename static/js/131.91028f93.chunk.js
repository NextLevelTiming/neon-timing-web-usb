"use strict";(self.webpackChunkneon_timing_web_usb=self.webpackChunkneon_timing_web_usb||[]).push([[131],{7131:(t,s,i)=>{i.d(s,{ESP32S3ROM:()=>a});var e=i(5422);class a extends e.e{constructor(){super(...arguments),this.CHIP_NAME="ESP32-S3",this.IMAGE_CHIP_ID=9,this.EFUSE_BASE=1610641408,this.MAC_EFUSE_REG=this.EFUSE_BASE+68,this.EFUSE_BLOCK1_ADDR=this.EFUSE_BASE+68,this.EFUSE_BLOCK2_ADDR=this.EFUSE_BASE+92,this.UART_CLKDIV_REG=1610612756,this.UART_CLKDIV_MASK=1048575,this.UART_DATE_REG_ADDR=1610612864,this.FLASH_WRITE_SIZE=1024,this.BOOTLOADER_FLASH_OFFSET=0,this.FLASH_SIZES={"1MB":0,"2MB":16,"4MB":32,"8MB":48,"16MB":64},this.SPI_REG_BASE=1610620928,this.SPI_USR_OFFS=24,this.SPI_USR1_OFFS=28,this.SPI_USR2_OFFS=32,this.SPI_MOSI_DLEN_OFFS=36,this.SPI_MISO_DLEN_OFFS=40,this.SPI_W0_OFFS=88,this.USB_RAM_BLOCK=2048,this.UARTDEV_BUF_NO_USB=3,this.UARTDEV_BUF_NO=1070526796}async getChipDescription(t){const s=await this.getMajorChipVersion(t),i=await this.getMinorChipVersion(t),e=await this.getPkgVersion(t);return"".concat({0:"ESP32-S3 (QFN56)",1:"ESP32-S3-PICO-1 (LGA56)"}[e]||"unknown ESP32-S3"," (revision v").concat(s,".").concat(i,")")}async getPkgVersion(t){return await t.readReg(this.EFUSE_BLOCK1_ADDR+12)>>21&7}async getRawMinorChipVersion(t){return((await t.readReg(this.EFUSE_BLOCK1_ADDR+20)>>23&1)<<3)+(await t.readReg(this.EFUSE_BLOCK1_ADDR+12)>>18&7)}async getMinorChipVersion(t){const s=await this.getRawMinorChipVersion(t);return await this.isEco0(t,s)?0:this.getRawMinorChipVersion(t)}async getRawMajorChipVersion(t){return await t.readReg(this.EFUSE_BLOCK1_ADDR+20)>>24&3}async getMajorChipVersion(t){const s=await this.getRawMinorChipVersion(t);return await this.isEco0(t,s)?0:this.getRawMajorChipVersion(t)}async getBlkVersionMajor(t){return await t.readReg(this.EFUSE_BLOCK2_ADDR+16)>>0&3}async getBlkVersionMinor(t){return await t.readReg(this.EFUSE_BLOCK1_ADDR+12)>>24&7}async isEco0(t,s){return 0===(7&s)&&1===await this.getBlkVersionMajor(t)&&1===await this.getBlkVersionMinor(t)}async getFlashCap(t){const s=this.EFUSE_BASE+68+12;return await t.readReg(s)>>27&7}async getFlashVendor(t){const s=this.EFUSE_BASE+68+16;return{1:"XMC",2:"GD",3:"FM",4:"TT",5:"BY"}[await t.readReg(s)>>0&7]||""}async getPsramCap(t){const s=this.EFUSE_BASE+68+16;return await t.readReg(s)>>3&3}async getPsramVendor(t){const s=this.EFUSE_BASE+68+16;return{1:"AP_3v3",2:"AP_1v8"}[await t.readReg(s)>>7&3]||""}async getChipFeatures(t){const s=["Wi-Fi","BLE"],i=await this.getFlashCap(t),e=await this.getFlashVendor(t),a={0:null,1:"Embedded Flash 8MB",2:"Embedded Flash 4MB"}[i],n=void 0!==a?a:"Unknown Embedded Flash";null!==a&&s.push("".concat(n," (").concat(e,")"));const r=await this.getPsramCap(t),_=await this.getPsramVendor(t),h={0:null,1:"Embedded PSRAM 8MB",2:"Embedded PSRAM 2MB"}[r],E=void 0!==h?h:"Unknown Embedded PSRAM";return null!==h&&s.push("".concat(E," (").concat(_,")")),s}async getCrystalFreq(t){return 40}_d2h(t){const s=(+t).toString(16);return 1===s.length?"0"+s:s}async postConnect(t){const s=255&await t.readReg(this.UARTDEV_BUF_NO);t.debug("In _post_connect "+s),s==this.UARTDEV_BUF_NO_USB&&(t.ESP_RAM_BLOCK=this.USB_RAM_BLOCK)}async readMac(t){let s=await t.readReg(this.MAC_EFUSE_REG);s>>>=0;let i=await t.readReg(this.MAC_EFUSE_REG+4);i=i>>>0&65535;const e=new Uint8Array(6);return e[0]=i>>8&255,e[1]=255&i,e[2]=s>>24&255,e[3]=s>>16&255,e[4]=s>>8&255,e[5]=255&s,this._d2h(e[0])+":"+this._d2h(e[1])+":"+this._d2h(e[2])+":"+this._d2h(e[3])+":"+this._d2h(e[4])+":"+this._d2h(e[5])}getEraseSize(t,s){return s}}},5422:(t,s,i)=>{i.d(s,{e:()=>e});class e{getEraseSize(t,s){return s}}}}]);
//# sourceMappingURL=131.91028f93.chunk.js.map